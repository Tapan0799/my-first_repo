Function Decorator:-
------------------

Decorater is a function which can take a function as argument and extend its functionality and return modified function with extend functionality.



  input function               new(add some functionality)
-----------------> Decorate -------------------------------->
	wish()                     decore/ineer() 


The main advtange of decorator is we can extend the functionality of exitsing function without modify that function


def moudification_cal(cal):
    def inner(a,b):
        mul = a*b
        div = a/b
        cal(a, b)
        print('decore ka mul:-',mul,'decore ka div:-',div)
    return inner

@moudification_cal
def cal(a,b):
    sum = a+b
    sub = a-b
    print('main func ka sum:-',sum,'main func ka sub:-',sub)

cal(10,20)

op:- 
main func ka sum:- 30 main func ka sub:- -10
decore ka mul:- 200 decore ka div:- 0.5

def decor(wish):
    def inner(name):
        if name == "Amiya":
            print("Please donot come here")
        else:
            wish(name)
    return inner

@decor
def wish(name):
    print("Hello",name,"Good morning")

wish('Prasana')
wish('Amiya')


Homework:-

1.Try decorator from your side.
2.Try decorator chaining once.


Decorator Chaining:-
------------------ 

We can define multiple decorater for the some function and all the decorator with from decorator chaining.




Generator:-
--------

Generator is a function which is responsible to generate a sequence of values.
We can write generator function like odinary function, But it use yield word to return the values.

It's return the value one by one so here we can use next() function

def calculator(a,b):
    sum = a+b
    sub = a-b
    mul = a*b
    div = (a/b)
    yield sum
    yield sub
    yield mul
    yield div

s = calculator(10,20)

print(next(s))
print(next(s))
print(next(s))
print(next(s))





<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd"> 
<html> 
<head> 
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
<title>Under Construction</title> 
</head> 
<body> 
<br><br><br><br><br><br><br> 
<table width="100%" border="0" cellspacing="0" cellpadding="0" align="center"> 
   <tr> 
      <td align="center"> 
      <img src="error.png" border="0"> 
      <h1 style="margin:0;padding:0;font-family: trebuchet ms;">TREENETRA EDUCATION OF SOFTWARE TECHNOLOGY.
      <br><small style="color: #888;" align="center">Lunch Date:- 26 Dec 2022.</small> 
      </h1> 
      </td> 
      </tr> 
    </table> 
  </body> 
</html> 



Fundamental Python
Identifiers
Data type and structure
Opeartor
Input and Output
Flow control -------------- while 3
Function -------------------------------lambda 4 :- list com -5
Decorater and generator ---------------------6 
Module
Packages -----------------2
File ---------------------1  ------------------------- head and tail(rem) -7
Opps
memory managemnt ------------------------------6
shallow copy and deep copy -----------------------------------8(rem)

test program----------------------------------------------------9


Exception(selenium)
Db-Connections(pytest)


Date:-	Subject
26th Dec	Doubt Clear
27th Dec	Doubt Clear
28th Dec	Mongo DB
29th Dec	Mongo DB
30th Dec	Mongo DB
31st Dec	GIT
	
1st Jan	Chuti
2nd Jan	Selenium
3rd Jan	Selenium
4th Jan	Selenium
5th Jan	Selenium
6th Jan	Selenium
7th Jan	Selenium
8th Jan	Selenium
9th Jan	Selenium
10th Jan	Selenium
11th Jan	Selenium
12th Jan	Selenium
13th Jan	Selenium
14th Jan	Selenium
15th Jan	Pytest and Unittest
16th Jan	Pytest and Unittest
17th Jan	Pytest and Unittest
18th Jan	Pytest and Unittest
19th Jan	Pytest and Unittest
20th Jan	Pytest and Unittest
21st Jan	Pytest and Unittest
22nd Jan	Pytest and Unittest
23rd Jan	API and Rest API
24th Jan	API and Rest API
25th Jan	API and Rest API
26th Jan	Post Man
27th Jan	Docker
28th Jan	AWS(EC2)
29th Jan	Project
30th Jan	Project
31st Jan	Project


Hi All,

Tomorrow Python class time will be 8am to 9am.

link:- https://meet.google.com/ypb-qhou-qdj

Thanks,
Chandra Sekhar
TREENETRA EDUCATION OF SOFTWARE TECHNOLOGY