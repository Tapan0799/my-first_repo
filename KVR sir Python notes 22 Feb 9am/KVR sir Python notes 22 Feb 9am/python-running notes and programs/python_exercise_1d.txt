Functions in Python

functions are group of statements to achieved one task
Main advantage of function is reusability

def isEven(x):
  if(x%2==0):
    print "even"
  else:

def squareofnumber(x):
     return x*x

square1value = squareofnumber(4)
square2value = squareofnumber(5)
print(square1value)
print(square2value)

Built in functions:
id() - to get the id of the python object
type() - to check the python type class

we can return mukltiple values from a function

def rectangledimensions():
   return 20,30

length,breadth = rectangledimensions()

function arguments
1) Arguments based on position
2) Arguments based on keyword
3) Variable length arguments
4) Default arguments

Arguments based on position

def division(a,b):
    print(a/b)

division(40,20)
division(20,40)
if we change the order we get different result

Arguments based on keyword

we will pass by parameter name

def division(a,b):
    print(a/b)

division(a=40,b=20)
division(b=20,a=40)
here even if we change the order, based on the 
variable name assigned the function parameter is mapped

Variable length arguments
we can pass any number of arguments to a function
we declare variable lenght argument with * symbol

def add(*numbers):
       total = 0
       for number in numbers:
          total = total + number
       print("the total is", total)

add(5) # 5
add(5,10) #15
add(20,30,40) #90


default arguments:
we can pass default values
always in a function parameter, the default value parameter
should be next to non default one

def division(a,b=20):
    print(a/b)

division(40)
division(40,10)

Function : what are types of variables

Global variables
Local Variables

Global variables : these variables are declared outside function
these variables can be accessed in all functions of that module

x=20 # global variable
def function1():
    print(x)

def function2():
    print(x)

function1()
function2()

Local variables:
these variable are declared inside the function and they cannot be accessed
in other functions
x=20 # global variable
def function1():
    y=15 # this is local variable
    print(x)
    print(y)

def function2():
    print(x)
    print(y) # cannot access y defined as local variable in function1

function1()
function2()

global keyword
using global key word
the global variable value changed in one function is not getting reflected
in the other function when that functiona tries to access that global variable

when we declare the global variable inside the function using global keyword, 
then the value  changes happened in a function on that global variable will be reflected in all 
in the other functions when the global variable is accessed in those functions


what are Recursions, recursion will be part of functions

recursion is calling function from a function where both functions are same
In recursion, we go with larger value as input and reduce the larger value
to smallet value
to solve recursion problems, we go with recursion tree method
def function(n):
    if(n==1): --- constant amount of time
       return 1 -- constant amount of time
    print(n) -- constant amount of time
    function(n-1) --- T(n-1)

Let us take time to execute the above function(n) is T(n)
sum up all constant amount of times --- c
T(n) = T(n-1) + c when n>2
    = 1 when n<=2

T(n) = T(n-1) + c  - 1
T(n-1) = T(n-1-1) + c = T(n-2) + c  - 2
T(n-2) = T(n-2-1) + c = T(n-3) + c -- 3

T(n) = T(n-2) + c + c
T(n) = T(n-3) + c + c + c
     = T(n-3) + 3c

assume the function calls happens k time

T(n) = T(n-k) + kc = 1 + (n-2) * c = O(n)

T(2) = 1 
T(n-k) = 1
T(n-k) = 1 when n<=2

n-k = 2
k = n-2


T(n) = 1+(n-2)c
Time complexity : O(n)

def function(n): - --- T(n)
    if n<=2 --- constant amount of time
         return --- constant amount of time 
    print("*") -- constant amount of time
    function(n/2) --- T(n/2)
    function(n/2) --- T(n/2)
    print("*")   --- constant amount of time

function(20)
c is constant amount of time
T(n) = 2T(n/2) + c, for n>2
    = 1, for n<=2

time complexity is O(n)

def function(n): -- T(n)
     if(n<=1):
       return
     for i in range(1,n): --- n times
          print("*")
     function(n-1)

Time complexity

T(n)=n+T(n-1)


*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*






